/*

ðŸ“Œ 1. Easy Level â€” Fundamentals

### Network Security Basics
* HTTPS everywhere; no plain HTTP
* TLS versions: prefer TLS 1.2/1.3; disable weak ciphers
* SSL/TLS handshake â€” high-level flow only
* SSL Pinning: certificate vs public key pinning; fallback pins
* HSTS (HTTP Strict Transport Security)

### Authentication Basics
* Strong passwords â€” length > complexity; hash with bcrypt/argon2, salted
* MFA/2FA â€” SMS OTP, Email OTP, TOTP; risks of SMS
* Device binding (account linked to device identifiers)

### Data Security Basics
* Encryption at rest (AES-256) â€” DB, files, backups
* Encryption in transit (TLS 1.2/1.3)
* Mobile secure storage â€” iOS Keychain; Android Keystore/EncryptedSharedPrefs
* Handle sensitive data carefully â€” clear memory; avoid logs/clipboard

### Mobile App Fundamentals
* Root/Jailbreak detection (basic checks)
* Prevent screenshots â€” Android FLAG_SECURE; iOS secure display
* Secure logging â€” never log secrets/tokens
* Fail closed on certificate validation errors

--------------------------------------------------

ðŸ“Œ 2. Medium Level â€” Applied Security

### Mobile App Hardening
* Code obfuscation â€” ProGuard/R8, DexGuard; iOS symbol stripping
* Detect reverse-engineering tools â€” Frida/Xposed/Emulators
* Integrity checks â€” checksum, signature verification, tamper detection
* In-app browser hardening â€” restrict navigation, disable unsafe JS bridges
* Clipboard & screenshot hygiene for sensitive views

### Web & API Security (OWASP)
* OWASP Top 10 â€” XSS, CSRF, SQLi, SSRF, RCE (know mitigations)
* Secure cookies â€” HttpOnly, Secure, SameSite
* CSP â€” default-src 'none'; allowlist origins; frame-ancestors for clickjacking
* API Security (OWASP API Top 10) â€” broken auth, BOLA/IDOR, rate limiting
* Replay protection â€” nonce + timestamp; HMAC/JWS message signing

### Session & Identity Management
* Session timeout & rotation after privilege elevation
* JWTs â€” short TTL; refresh token rotation; storage risks (XSS)
* OAuth2 + OIDC â€” Auth Code + PKCE for mobile/web
* Biometric authentication â€” FaceID, TouchID, BiometricPrompt
* Passwordless authentication â€” WebAuthn/FIDO2

### Fraud & Risk Mitigation
* Transaction monitoring â€” velocity rules, anomaly detection
* Device fingerprinting â€” model, OS, unique signals
* Geo-location checks & geo-fencing; impossible travel detection
* Bot prevention â€” rate limiting, CAPTCHA (adaptive)
* Anti-phishing UX â€” verified domains, warning for suspicious links

--------------------------------------------------

ðŸ“Œ 3. Hard Level â€” Advanced & Architecture

### Advanced Mobile Security
* RASP â€” runtime hook detection, jailbreak/root detection
* Anti-debugging & anti-hooking â€” ptrace, anti-frida, debugger flags
* Overlay protection â€” prevent tapjacking; secure views
* Secure IPC â€” sanitize deep links, custom URL schemes, intents
* Device attestation â€” Play Integrity / DeviceCheck / App Attest

### Advanced Data & Key Management
* Tokenization vs Encryption vs Hashing â€” when to use each
* Key rotation policies; envelope encryption; key hierarchy
* HSM/KMS â€” secure key storage & usage policies
* Secrets management â€” Vault, AWS Secrets Manager
* End-to-End Encryption â€” session keys, forward secrecy

### Infrastructure & Deployment Security
* DevSecOps pipelines â€” SAST, DAST, SCA, IaC scanning
* Container/Kubernetes security â€” RBAC, Pod security, network policies
* Cloud hardening (AWS/GCP/Azure) â€” IAM least privilege, VPC isolation
* Zero Trust Architecture â€” identity-aware access, continuous verification
* DDoS protection â€” WAF, CDN, throttling, autoscale

### Compliance & Standards (Banking)
* OWASP MASVS (Mobile Application Security Verification Standard)
* OWASP ASVS (Web Application Security Verification Standard)
* PCI DSS â€” payment card security requirements
* ISO 27001 / SOC 2 â€” organizational security standards
* GDPR, CCPA â€” privacy laws; PSD2, RBI, FFIEC â€” banking-specific

### Threat Detection & Incident Response
* SIEM integration (Splunk, ELK, Sentinel) for alerts
* Audit trails â€” who, when, what; ensure non-repudiation
* Tamper-proof logs â€” signing, WORM storage
* Incident Response lifecycle â€” detect, contain, eradicate, recover, learn
* Threat modeling â€” MITRE ATT&CK, kill-chain, purple-team exercises

--------------------------------------------------

ðŸ“Œ 4. Quick Security Checklist (Mobile & Web Banking)

### ðŸ”’ Security
* Always use HTTPS/TLS; enforce HSTS
* Implement SSL Pinning (with backup keys)
* Enforce MFA/2FA for authentication
* Use secure storage â€” Keychain/Keystore
* Prevent screenshots and clipboard leaks
* Protect APIs with OAuth2 + scopes
* Secure cookies â€” HttpOnly, Secure, SameSite
* Sanitize/validate all inputs; prevent XSS & SQLi
* Apply CSP headers & anti-clickjacking measures
* Use biometric auth for convenience & security
* Rotate keys regularly; manage secrets in Vault/KMS
* Comply with PCI DSS, GDPR, PSD2

### ðŸš€ Performance & Stability (Banking Apps)
* Rate limit APIs; protect from brute-force
* Cache non-sensitive data safely
* Optimize TLS handshakes (session resumption)
* Implement CDN/WAF for scaling & DDoS protection
* Monitor app for anomalies & fraud patterns

### ðŸ›  DevOps & Deployment
* Automate scans in CI/CD (SAST, DAST, dependency checks)
* Use container security best practices (RBAC, image scanning)
* Implement zero-trust networking
* Ensure tamper-proof logging & monitoring
* Plan & test incident response playbooks

*/
