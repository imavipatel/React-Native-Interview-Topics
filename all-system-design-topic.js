/*

âœ… ðŸŸ¢ EASY â€“ Start with basic concepts

Monolith vs Microservices
â†’ When to use which architecture â€” ARCHITECTURE CHOICE

SQL vs NoSQL
â†’ Which database is better for e-commerce scenario & why â€” DATABASE SELECTION

Cache layers (Redis, Memcached, CDN)
â†’ How to reduce DB load & speed up response â€” CACHING BASICS

Pagination / Filtering / Sorting
â†’ Should this logic be handled in frontend or backend? â€” DATA ACCESS PATTERN

REST vs GraphQL
â†’ Designing APIs for flexibility & performance â€” API DESIGN

Kafka & Event-driven Architecture
â†’ Producers & consumers handle real-time async â€” PUB/SUB MODEL

Consistency models
â†’ Strong consistency vs eventual consistency â€” DATA CONSISTENCY

Notification basics
â†’ Payment alert vs offer notification â†’ which to prioritize â€” PRIORITY QUEUE

Middle-layer API aggregation
â†’ Handle if 1 out of 3 APIs is slow â†’ fallback gracefully â€” API ORCHESTRATION

Requirement gathering
â†’ Ask questions before design (ex: 3 APIs â†’ what info needed?) â€” REQUIREMENT CLARIFICATION

ðŸ”¹ Frontend fundamentals

SPA vs MPA â†’ Which is better & when â€” RENDER STRATEGY

Responsive + Accessible UI â†’ Works on all devices & with screen readers â€” UX DESIGN

Lazy loading, Code splitting â†’ Reduce bundle size â€” PERFORMANCE

Redux, Zustand â†’ How to manage complex state â€” STATE MANAGEMENT

XSS, CSRF, CORS â†’ Basic web security terms â€” SECURITY BASICS

âœ… ðŸŸ  MEDIUM â€“ Scalable & smart designs
ðŸ”¹ Booking.com-style concurrency

â€¢ Same room booked by two users â†’ use locks â€” LOCKING
â€¢ Same hotel booked from two sites â†’ use distributed locks â€” DISTRIBUTED LOCK
â€¢ Multi-room inventory (10 rooms left) â†’ handle race â€” RACE CONDITION

ðŸ”¹ Google Docs / Figma-style real-time editor

â€¢ Two people type at same time â†’ maintain order â€” OT vs CRDT
â€¢ Show previous versions & edit history â†’ VERSIONING
â€¢ User edits offline â†’ sync once back online â€” OFFLINE SYNC
â€¢ Realtime drag of rectangles/text by multiple users â†’ EVENT-DRIVEN SHARING

ðŸ”¹ Chat / WhatsApp-style system

â€¢ Ensure message appears in correct order â†’ MESSAGE ORDERING
â€¢ Show âœ“, âœ“âœ“ for delivery â†’ DELIVERY STATUS
â€¢ Message received after 5 sec â†’ how to still show correctly â€” LATE MESSAGE HANDLING

ðŸ”¹ Infinite Scroll UI (e.g., Books list)

â€¢ Load page-by-page until 100K items â†’ VIRTUALIZED LIST
â€¢ User jumps from page 1 to page 30000 â†’ RANDOM PAGE FETCHING
â€¢ Cache already visited pages â†’ CACHE WINDOW MANAGEMENT

ðŸ”¹ Product screen with 3 APIs

â€¢ If one API fails â†’ still show others â†’ PARTIAL RENDER
â€¢ Use fallback UI â†’ skeleton loaders â†’ RESILIENT UI
â€¢ Retry/fallback logic from middle-layer â†’ RETRY PATTERN

ðŸ”¹ Newspaper Website

â€¢ Lazy load articles & images â†’ FAST LOAD
â€¢ Hot news appears instantly â†’ use WebSocket â†’ REALTIME PUSH
â€¢ Suggest related news â†’ based on tags â†’ CONTENT RANKING
â€¢ Define clear interface between FE â†” BE â†’ API CONTRACT

ðŸ”¹ Amazon/Flipkart Notifications

â€¢ Payment & order update = high priority â€” PRIORITY KAFKA TOPIC
â€¢ Offers & promos = low priority â€” BACKGROUND QUEUE
â€¢ Push vs pull based on device â†’ NOTIFICATION STRATEGY

Frontend architecture at this level:

CSR vs SSR vs SSG â†’ how pages are rendered â€” RENDER STRATEGIES

WebSocket vs Long Polling vs SSE â†’ REALTIME CHANNELS

Service Worker to cache pages offline â€” PWA BASICS

Authorization with tokens â†’ JWT / OAUTH SECURITY

âœ… ðŸ”´ HARD â€“ Deep performance, global scale, senior-level
ðŸ”¥ Figma-like realtime design tool

â€¢ Two people change color of same shape â†’ resolve conflict â€” CRDT CONFLICT
â€¢ Person edits offline â†’ batch sync when online â†’ OPERATION TRANSFORM
â€¢ Ability to revert back to any older design â†’ FULL HISTORY LOG

ðŸ”¥ Global booking across regions

â€¢ Hotel available in US + India DC â†’ keep count synced â€” MULTI-DC CONSISTENCY
â€¢ If one booking step fails â†’ undo entire process â€” SAGA PATTERN
â€¢ Retry booking â†’ should not double charge â€” IDEMPOTENT APIs
â€¢ Split customers or rooms by region â†’ SHARDING

ðŸ”¥ Micro-frontend Architecture

â€¢ Multiple teams deploy parts of the website independently â€” MFE ARCH
â€¢ Share common libraries & talk between apps â€” MFE INTEGRATION

ðŸ”¥ Frontend monitoring & observability

â€¢ Track load times (LCP, FID, TTFB) from real users â€” RUM METRICS
â€¢ Log clicks & crashes on browser â€” TELEMETRY / ERROR TRACKING

ðŸ”¥ Web performance optimization

â€¢ CDN + ETag for caching â€” HTTP CACHING
â€¢ Load fonts & CSS without blocking â€” CRITICAL RENDER PATH
â€¢ External scripts loaded with async/defer â€” 3RD PARTY OPTIMIZATION
â€¢ Send lighter bundle to low-end phones â€” ADAPTIVE LOADING

ðŸ”¥ Security & Offline-First Web

â€¢ Protect against malicious scripts â€” CSP + SANITIZATION
â€¢ Prevent CSRF using tokens/cookies â€” CSRF DEFENSE
â€¢ Use Service Worker to cache & sync â€” OFFLINE FIRST (PWA)
â€¢ Background sync user actions when offline â€” SYNC QUEUE

*/
