/* =============================================================================
📘 ProGuard / R8 Shrinking + Hermes Bytecode Size in React Native
============================================================================= */

/*
🟢 Introduction
-----------------------------------------------------------------------------
- React Native apps bundle JavaScript + native code → larger APK/IPA sizes.
- Two main tools reduce **native (Java/Kotlin)** code size:
  1. ProGuard
  2. R8
- For **JavaScript side**, Hermes compiles JS → Bytecode (smaller & faster).
- Combining shrinking + Hermes optimizations = smaller app size & faster startup.
*/

/* =============================================================================
🔹 1. ProGuard
-----------------------------------------------------------------------------
- A Java bytecode optimizer (used in Android builds).
- Shrinks, obfuscates, and optimizes Java bytecode.
- Removes unused classes, methods, and fields.
- Obfuscates code (renames methods/variables → a, b, c) for security.

✅ Advantages:
- Smaller APK size.
- Harder to reverse-engineer code.
- Removes dead code.

⚠️ Caveats:
- Can sometimes remove needed classes (e.g., reflection-based libraries).
- Requires keeping rules (proguard-rules.pro).
*/

/* =============================================================================
🔹 2. R8 (Modern Replacement for ProGuard)
-----------------------------------------------------------------------------
- R8 = Google’s newer code shrinker (default in Android Gradle Plugin 3.4+).
- Faster & more optimized than ProGuard.
- Shrinking + Desugaring + Dexing in one step.
- Compatible with ProGuard rules but more efficient.

✅ Advantages over ProGuard:
- Better shrinking → smaller APK.
- Faster build times.
- Handles Kotlin & Java better.
- Replaces ProGuard (no need to install separately).

📌 In React Native Android:
- Enabled by default in release builds:
  android/app/build.gradle:
  release {
      minifyEnabled enableProguardInReleaseBuilds
      shrinkResources enableShrinkResourcesInReleaseBuilds
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
  }
*/

/* =============================================================================
🔹 3. Hermes & Bytecode Size
-----------------------------------------------------------------------------
- Hermes = React Native’s JS engine optimized for mobile.
- Compiles JS → Bytecode **ahead of time** (AOT).
- Bytecode is smaller than raw JS bundle and loads faster.

✅ Benefits:
- Smaller APK size (since JS bundle shrinks).
- Faster startup (no parsing of JS at runtime).
- Lower memory usage.

📌 Example:
Without Hermes:
- JS bundle (main.jsbundle) ~ 5 MB
- APK size larger, JS parsing takes time.

With Hermes:
- Bytecode (index.android.bundle.hbc) ~ 3 MB
- APK size smaller, startup faster.

📌 Hermes bytecode is generated by:
react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res

then converted to bytecode by `hermesc`.
*/

/* =============================================================================
🔹 4. Combining R8 + Hermes
-----------------------------------------------------------------------------
- R8 reduces native side (Java/Kotlin).
- Hermes reduces JS side (JavaScript bundle).
- Together → optimized APK size & performance.

✅ Recommended settings:
- Enable R8 in `gradle.properties`:
  android.enableR8 = true
- Enable Hermes in `android/app/build.gradle`:
  project.ext.react = [
    enableHermes: true  // clean & rebuild after enabling
  ]

✅ Shrinking resources:
- Also remove unused resources (images, layouts, etc.) with:
  shrinkResources true
*/

/* =============================================================================
🔹 5. Best Practices
-----------------------------------------------------------------------------
1. Always test release builds with ProGuard/R8 enabled.
2. Add keep rules in `proguard-rules.pro` for:
   - Reflection-based libs (Firebase, Gson, Retrofit).
   - React Native classes.
3. Enable Hermes for production → improves startup & reduces size.
4. Combine `shrinkResources` + R8 + Hermes for best results.
5. Use Android App Bundle (.aab) → Google Play optimizes APK per device.
*/

/* =============================================================================
🔹 6. Comparison – ProGuard vs R8 vs Hermes
-----------------------------------------------------------------------------
| Feature             | ProGuard                   | R8 (default)             | Hermes                   |
|---------------------|----------------------------|--------------------------|--------------------------|
| Purpose             | Shrink/obfuscate Java code | Shrink + Dex + optimize  | Compile JS → Bytecode    |
| Optimizes           | Native code (Java/Kotlin)  | Native code (Java/Kotlin)| JS bundle                |
| Build Speed         | Slower                     | Faster                   | N/A (engine-level)       |
| Security            | Obfuscates code            | Obfuscates code          | Bytecode harder to read  |
| App Size Impact     | Moderate                   | High (smaller APK)       | High (smaller JS bundle) |
*/

/* =============================================================================
🔹 7. Q&A (Interview Style)
-----------------------------------------------------------------------------
Q1: Why do we need R8 if Hermes already reduces size?
   → R8 shrinks Java/Kotlin native code, Hermes shrinks JS bundle.
      Both target different layers.

Q2: Can R8 break React Native apps?
   → Yes, if it removes classes required by reflection. Fix with proguard-rules.

Q3: Is ProGuard still used?
   → R8 replaced ProGuard as default, but both are supported.

Q4: Does Hermes always reduce APK size?
   → Usually yes, but sometimes slightly increases due to Hermes engine binary.
      Net effect = faster startup + smaller JS bundle.
*/

/* =============================================================================
🔹 8. Real-World Benchmarks (Example)
-----------------------------------------------------------------------------
📌 React Native app (Medium-sized, ~50 screens, API + images)

➡️ Without ProGuard/R8 + No Hermes:
   - APK Size: ~65 MB
   - Startup Time (cold): ~3.2s

➡️ With R8 + Shrink Resources + No Hermes:
   - APK Size: ~52 MB
   - Startup Time (cold): ~3.0s

➡️ With Hermes + No R8:
   - APK Size: ~58 MB
   - Startup Time (cold): ~2.1s

➡️ With R8 + Shrink Resources + Hermes (recommended):
   - APK Size: ~45 MB
   - Startup Time (cold): ~1.7s

✅ Net Gain:
- Reduced APK size by ~30%.
- Improved startup speed by ~50%.
- Better memory management + security.
*/

/* =============================================================================
✅ Final Takeaway
-----------------------------------------------------------------------------
- **ProGuard** = old shrinker, still supported.
- **R8** = modern default, reduces native code size + faster builds.
- **Hermes** = shrinks JS bundle & boosts startup performance.
- Use **R8 + Hermes + shrinkResources** together for best optimization.
============================================================================= */
